// Code generated by "tmtr 0.1.12 -fn lotsofesc -type string -in ./lotsofesc.html.txt -mode html"; DO NOT EDIT.

package bench

import (
	io "io"
	tmtr "github.com/apleshkov/tmtr/funcs"
)

func lotsofesc(output io.Writer, data string, errOutput io.Writer) {
	tmtr.Write(output, "<html>\n<head>\n    <title>", errOutput)
	tmtr.Write(output, tmtr.EscapeRCData(data), errOutput)
	tmtr.Write(output, "</title>\n</head>\n<body>\n    ", errOutput)
	if tmtr.IsTrue(data) {
		tmtr.Write(output, "\n        ", errOutput)
		tmtr.Write(output, tmtr.EscapeComment(data), errOutput)
		tmtr.Write(output, "\n        <style>\n            p {\n                background: url('", errOutput)
		tmtr.Write(output, tmtr.NormalizeURL(tmtr.FilterURL(errOutput, data)), errOutput)
		tmtr.Write(output, "');\n            }\n        </style>\n        <a data-a=\"", errOutput)
		tmtr.Write(output, tmtr.EscapeHTMLAttr(data), errOutput)
		tmtr.Write(output, "\">", errOutput)
		tmtr.Write(output, tmtr.EscapeHTML(data), errOutput)
		tmtr.Write(output, "</a>\n        <a style=\"p { background: url('", errOutput)
		tmtr.Write(output, tmtr.EscapeHTMLAttr(tmtr.NormalizeURL(tmtr.FilterURL(errOutput, data))), errOutput)
		tmtr.Write(output, "'); }\">", errOutput)
		tmtr.Write(output, tmtr.EscapeHTML(data), errOutput)
		tmtr.Write(output, "</a>\n        <x-", errOutput)
		tmtr.Write(output, tmtr.FilterHTMLTagContent(data), errOutput)
		tmtr.Write(output, " />\n        <div>", errOutput)
		tmtr.Write(output, tmtr.EscapeHTML(data), errOutput)
		tmtr.Write(output, "</div>\n        <script>const re = /", errOutput)
		tmtr.Write(output, tmtr.EscapeJSRegexp(data), errOutput)
		tmtr.Write(output, "/;</script>\n        <a onclick=\"'", errOutput)
		tmtr.Write(output, tmtr.EscapeJSStr(data), errOutput)
		tmtr.Write(output, "'\">", errOutput)
		tmtr.Write(output, tmtr.EscapeHTML(data), errOutput)
		tmtr.Write(output, "</a>\n        <a onclick=\"`", errOutput)
		tmtr.Write(output, tmtr.EscapeJSTmplLit(data), errOutput)
		tmtr.Write(output, "`\">", errOutput)
		tmtr.Write(output, tmtr.EscapeHTML(data), errOutput)
		tmtr.Write(output, "</a>\n        <script>", errOutput)
		tmtr.Write(output, tmtr.EscapeJS(errOutput, data), errOutput)
		tmtr.Write(output, "</script>\n        <p title=", errOutput)
		tmtr.Write(output, tmtr.EscapeUnquotedHTMLAttr(data), errOutput)
		tmtr.Write(output, ">", errOutput)
		tmtr.Write(output, tmtr.EscapeHTML(data), errOutput)
		tmtr.Write(output, "</p>\n        <img srcset=\"", errOutput)
		tmtr.Write(output, tmtr.EscapeHTMLAttr(tmtr.FilterAndEscapeSrcset(errOutput, data)), errOutput)
		tmtr.Write(output, "\" />\n        <a href=\"/?", errOutput)
		tmtr.Write(output, tmtr.EscapeHTMLAttr(tmtr.EscapeURL(data)), errOutput)
		tmtr.Write(output, "\">", errOutput)
		tmtr.Write(output, tmtr.EscapeHTML(data), errOutput)
		tmtr.Write(output, "</a>\n        <a href=\"", errOutput)
		tmtr.Write(output, tmtr.EscapeHTMLAttr(tmtr.NormalizeURL(tmtr.FilterURL(errOutput, data))), errOutput)
		tmtr.Write(output, "\">", errOutput)
		tmtr.Write(output, tmtr.EscapeHTML(data), errOutput)
		tmtr.Write(output, "</a>\n        <a href=\"/", errOutput)
		tmtr.Write(output, tmtr.EscapeHTMLAttr(tmtr.NormalizeURL(data)), errOutput)
		tmtr.Write(output, "\">", errOutput)
		tmtr.Write(output, tmtr.EscapeHTML(data), errOutput)
		tmtr.Write(output, "</a>\n    ", errOutput)
	}
	tmtr.Write(output, "\n</body>\n</html>", errOutput)
}
