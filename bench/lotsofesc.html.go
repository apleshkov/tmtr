// Code generated by "tmtr 0.1.12 -fn lotsofesc -type *benchData -in ./lotsofesc.html"; DO NOT EDIT.

package bench

import (
	io "io"
	tmtr "github.com/apleshkov/tmtr/funcs"
)

func lotsofesc(output io.Writer, data *benchData, errOutput io.Writer) {
	tmtr.Write(output, "<html>\n\n<head>\n    <title>RCDataEscaper: ", errOutput)
	tmtr.Write(output, tmtr.RCDataEscaper(errOutput, data.Title), errOutput)
	tmtr.Write(output, "</title>\n</head>\n\n<body>\n    ", errOutput)
	tmtr.Write(output, tmtr.CommentEscaper(errOutput, data.Title), errOutput)
	tmtr.Write(output, "\n    CSSEscaper: <style>\n        p {\n            background: url('", errOutput)
	tmtr.Write(output, tmtr.URLNormalizer(errOutput, tmtr.URLFilter(errOutput, data.URL)), errOutput)
	tmtr.Write(output, "');\n        }\n    </style>\n    ", errOutput)
	if list := data.Items; tmtr.IsTrue(list) {
		for _, elem := range list {
			tmtr.Write(output, "\n    <a data-a=\"", errOutput)
			tmtr.Write(output, tmtr.AttrEscaper(errOutput, elem), errOutput)
			tmtr.Write(output, "\">AttrEscaper</a>\n    <a style=\"p { background: url('", errOutput)
			tmtr.Write(output, tmtr.AttrEscaper(errOutput, tmtr.URLNormalizer(errOutput, tmtr.URLFilter(errOutput, elem))), errOutput)
			tmtr.Write(output, "'); }\">CSSValueFilter</a>\n    HTMLNameFilter: <x-", errOutput)
			tmtr.Write(output, tmtr.HTMLNameFilter(errOutput, elem), errOutput)
			tmtr.Write(output, " />\n    <div>HTMLEscaper: ", errOutput)
			tmtr.Write(output, tmtr.HTMLEscaper(errOutput, elem), errOutput)
			tmtr.Write(output, "</div>\n    <script>var JSRegexpEscaper = (/", errOutput)
			tmtr.Write(output, tmtr.JSRegexpEscaper(errOutput, elem), errOutput)
			tmtr.Write(output, "/)</script>\n    <a onclick=\"'", errOutput)
			tmtr.Write(output, tmtr.JSStrEscaper(errOutput, elem), errOutput)
			tmtr.Write(output, "'\">JSStrEscaper</a>\n    <a onclick=\"`", errOutput)
			tmtr.Write(output, tmtr.JSTmplLitEscaper(errOutput, elem), errOutput)
			tmtr.Write(output, "`\">JSTmplLitEscaper</a>\n    <script> ", errOutput)
			tmtr.Write(output, tmtr.CommentEscaper(errOutput, elem), errOutput)
			tmtr.Write(output, " </script>\n    <p title=", errOutput)
			tmtr.Write(output, tmtr.HTMLNospaceEscaper(errOutput, elem), errOutput)
			tmtr.Write(output, ">HTMLNospaceEscaper</p>\n    SrcsetFilterAndEscaper: <img srcset=\"", errOutput)
			tmtr.Write(output, tmtr.AttrEscaper(errOutput, tmtr.SrcsetFilterAndEscaper(errOutput, elem)), errOutput)
			tmtr.Write(output, "\" />\n    <a href=\"/?", errOutput)
			tmtr.Write(output, tmtr.AttrEscaper(errOutput, tmtr.URLEscaper(errOutput, elem)), errOutput)
			tmtr.Write(output, "\">URLEscaper</a>\n    <a href=\"", errOutput)
			tmtr.Write(output, tmtr.AttrEscaper(errOutput, tmtr.URLNormalizer(errOutput, tmtr.URLFilter(errOutput, elem))), errOutput)
			tmtr.Write(output, "\">URLFilter</a>\n    <a href=\"/", errOutput)
			tmtr.Write(output, tmtr.AttrEscaper(errOutput, tmtr.URLNormalizer(errOutput, elem)), errOutput)
			tmtr.Write(output, "\">URLNormalizer</a>\n    ", errOutput)
		}
	}
	tmtr.Write(output, "\n</body>\n\n</html>", errOutput)
}
