package main

import (
	"errors"
	"fmt"
	"go/format"
	"go/token"
	"os"
	"strings"

	"github.com/apleshkov/tmtr/cli"
	"github.com/apleshkov/tmtr/gen"
)

func BadFlag(err *cli.BadFlagErr) {
	fmt.Fprintf(os.Stderr, "[ERROR] %v\n\n", err)
	cli.Usage()
	os.Exit(2)
}

func ErrExit(err error) {
	fmt.Fprintf(os.Stderr, "[ERROR] %v\n", err)
	os.Exit(1)
}

func main() {
	opts, err := cli.Parse()
	if err != nil {
		var bf *cli.BadFlagErr
		if errors.As(err, &bf) {
			BadFlag(bf)
		}
		ErrExit(err)
	}
	f, err := gen.GenerateFromFile(*opts)
	if err != nil {
		ErrExit(err)
	} else {
		out, err := os.Create(opts.OutFile)
		if err != nil {
			ErrExit(err)
		}
		fmt.Fprintf(out, "// Code generated by \"tmtr %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
		fmt.Fprintf(out, "\n")
		fset := token.NewFileSet()
		if err := format.Node(out, fset, f); err != nil {
			ErrExit(err)
		}
	}
}
